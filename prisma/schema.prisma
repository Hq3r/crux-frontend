generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("POSTGRES_PRISMA_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("expires_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  walletType   String?  @map("wallet_type")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserPrivilegeLevel {
  DEFAULT
  BASIC
  PRO
  ADMIN
}

model User {
  id                 String               @id @default(cuid())
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")
  name               String?
  status             String?
  defaultAddress     String?              @unique @map("default_address")
  nonce              String?
  image              String?
  email              String?
  privilegeLevel     UserPrivilegeLevel   @default(DEFAULT) @map("privilege_level")
  accounts           Account[]
  sessions           Session[]
  wallets            Wallet[]
  addedWallets       AddedWallet[]
  loginRequests      LoginRequest[]
  chartData          ChartData[]
  paymentInstruments PaymentInstrument[]
  simpleTransactions SimpleTransaction[]
  subscriptions      Subscription[]
  reports            Report[]
  notifications      Notification[]
  mobileVerification MobileVerification[]
  filterPreset       FilterPreset[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Wallet {
  id              String   @id @default(cuid())
  type            String?
  changeAddress   String   @unique @map("change_address")
  unusedAddresses String[] @map("unused_addresses")
  usedAddresses   String[] @map("used_addresses")
  userId          String   @map("user_id")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model AddedWallet {
  id              String   @id @default(cuid())
  type            String?
  changeAddress   String   @map("change_address")
  unusedAddresses String[] @map("unused_addresses")
  usedAddresses   String[] @map("used_addresses")
  userId          String   @map("user_id")
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("added_wallets")
}

enum LoginRequestStatus {
  PENDING
  SIGNED
  EXPIRED
}

model LoginRequest {
  id             String             @id @default(cuid())
  userId         String             @map("user_id")
  user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  verificationId String             @unique @map("verification_id")
  message        String // The message to be signed, which is the nonce from the User model
  status         LoginRequestStatus
  signedMessage  String?            @map("signed_message")
  proof          String?
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")

  @@map("login_requests")
}

model ChartData {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  symbol    String
  data      Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, symbol])
}

enum TransactionStatus {
  CONFIRMED
  PENDING
  FAILED
  NOT_FOUND
}

model Transaction {
  id                  String            @id @default(cuid())
  paymentInstrumentId String            @map("payment_instrument_id")
  paymentInstrument   PaymentInstrument @relation(fields: [paymentInstrumentId], references: [id], onDelete: Cascade)
  amount              BigInt
  status              TransactionStatus @default(PENDING)
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")

  @@map("transactions")
}

model SimpleTransaction {
  id            String            @id @default(cuid())
  txId          String?           @map("tx_id")
  changeAddress String?           @map("change_address")
  amounts       Json
  status        TransactionStatus @default(PENDING)
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  userId        String            @map("user_id")
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentFor    String            @map("payment_for") // what is the payment for? Left as string to keep it open
  itemId        String            @map("item_id") // what is the ID of the item that was paid for. 

  // example: paymentFor "report" itemId "cltoooyyb0001u0dcfao6rw7f"
  // if we add something else to pay for later, we can use whatever name needed in paymentFor
  // rather than using JSON, this allows us to quickly grab specific transactions from db
  // this also allows us to list all "report" payments, 
  // or if we want to show outstanding payments generated to pay for a specific report, we can do that too, without parsing JSON

  @@map("simple_transactions")
}

enum PaymentInstrumentStatus {
  ACTIVE
  IN_USE
}

model PaymentInstrument {
  id            String                  @id @default(cuid())
  userId        String                  @map("user_id")
  user          User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance       BigInt
  tokenId       String?                 @map("token_id")
  status        PaymentInstrumentStatus @default(ACTIVE)
  transactions  Transaction[]
  charges       Charge[]
  subscriptions Subscription[]
  createdAt     DateTime                @default(now()) @map("created_at")
  updatedAt     DateTime                @updatedAt @map("updated_at")

  @@map("payment_instruments")
}

model Charge {
  id                  String            @id @default(cuid())
  paymentInstrumentId String            @map("payment_instrument_id")
  paymentInstrument   PaymentInstrument @relation(fields: [paymentInstrumentId], references: [id], onDelete: Cascade)
  amount              BigInt
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")

  @@map("charges")
}

model TransactionalLock {
  id    String    @id @default(cuid())
  lock  String?
  lease DateTime? @default(now())

  @@map("transactional_locks")
}

enum SubscriptionStatus {
  ACTIVE
  PAYMENT_PENDING
  EXPIRED
}

model Subscription {
  id                  String             @id @default(cuid())
  userId              String             @map("user_id")
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentInstrumentId String             @map("payment_instrument_id")
  paymentInstrument   PaymentInstrument  @relation(fields: [paymentInstrumentId], references: [id], onDelete: Cascade)
  requiredAmountUSD   BigInt             @map("required_amount_usd") // 2 decimals
  allowedAccess       UserPrivilegeLevel @default(BASIC) @map("allowed_access")
  periodSeconds       Int                @map("period_seconds")
  activationTimestamp DateTime?          @map("activation_timestamp")
  status              SubscriptionStatus @default(PAYMENT_PENDING)
  createdAt           DateTime           @default(now()) @map("created_at")
  updatedAt           DateTime           @updatedAt @map("updated_at")
  subscriptionType    String             @default("") @map("subscription_type")

  @@unique([userId])
  @@map("subscriptions")
}

enum ReportStatus {
  PREPAID
  AVAILABLE
  PAYMENT_PENDING
}

model Report {
  id               String       @id @default(cuid())
  reportFilename   String?      @map("report_filename")
  koinlyGenerating Boolean      @default(false) @map("koinly_generating")
  customName       String?      @map("custom_name")
  dateFrom         DateTime?    @map("date_from")
  dateTo           DateTime?    @map("date_to")
  wallets          Json?
  taxYear          Int?         @map("tax_year")
  status           ReportStatus
  userId           String       @map("user_id")
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  body      String
  href      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("notifications")
}

model KeyValuePair {
  key       String    @id
  value     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  expiresAt DateTime? @map("expires_at")

  @@map("kv")
}

model MobileVerification {
  verificationId String   @id @default(cuid())
  createdAt      DateTime @default(now()) @map("created_at")
  address        String?
  userId         String   @map("user_id")
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("mobile_verification")
}

model FilterPreset {
  id String @id @default(cuid())

  presetName     String  @map("preset_name")
  timeframe      String
  sort_by        String?
  sort_order     String?
  price_min      String?
  price_max      String?
  liquidity_min  String?
  liquidity_max  String?
  market_cap_min String?
  market_cap_max String?
  pct_change_min String?
  pct_change_max String?
  volume_min     String?
  volume_max     String?
  buys_min       Int?
  buys_max       Int?
  sells_min      Int?
  sells_max      Int?
  currency       String?
  searchString   String? @map("search_string")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("filter_preset")
}
